define(["./createTaskProcessorWorker","./defaultValue-f6d5e6da"],(function(t,r){"use strict";const e=["position","normal","uv0","uv1","color","uvRegion"],n=["featureId","faceRange"],o={UInt8:Uint8Array,UInt16:Uint16Array,Int16:Int16Array,UInt32:Uint32Array,Int32:Int32Array,UInt64:BigUint64Array,Int64:BigInt64Array,Float32:Float32Array,Float64:Float64Array};function a(t){return o[t]}return t((function(t,o){const u=t.arrayBuffer,f=t.geometryBuffer,l=t.vertexCount,i=t.featureCount;let s=r.defaultValue(f.offset,0);const c={};let y,A,I,E,U;for(let t=0;t<e.length;t++){const r=e[t];f[r]&&(y=f[r].type,A=f[r].component,I=a(y),E=I.BYTES_PER_ELEMENT*A*l,U=new I(u.slice(s,s+E)),c[r]=Array.from(U),s+=E)}const g={};for(let t=0;t<n.length;t++){const r=n[t];if(f[r]){if(y=f[r].type,A=f[r].component,I=a(y),E=I.BYTES_PER_ELEMENT*A*i,U=new I(u.slice(s,s+E)),"UInt64"===y||"Int64"===y){g[r]=[];for(let t=0;t<U.length;t++){const e=U[t];g[r].push(Number(e))}}else g[r]=Array.from(U);s+=E}}return{vertexAttributes:c,featureAttributes:g}}))}));
