function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();normalCompletion=step.done;return step},e:function e(_e2){didErr=true;err=_e2},f:function f(){try{if(!normalCompletion&&it["return"]!=null)it["return"]()}finally{if(didErr)throw err}}}}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}import{createTaskProcessor}from"./createTaskProcessor.js";import{centerOfMassOfPolygon,computeSignedArea,distance,addVector2Vector2,boundingRectangleFromPoints,matrix2FromRotation,matrix2Scale,multiMatrixVector2,toDegrees}from"./math.js";var LabelType;(function(LabelType){LabelType["Label2D"]="Label2D";LabelType["Label3D"]="Label3D"})(LabelType||(LabelType={}));var MarkerPointStyle;(function(MarkerPointStyle){MarkerPointStyle["Solid"]="Solid";MarkerPointStyle["Ring"]="Ring";MarkerPointStyle["Circle"]="Circle"})(MarkerPointStyle||(MarkerPointStyle={}));function buildPolylineNotationInfo(text,coordinates,rectangle,canvasWidth,canvasHeight){var numerOfPoints=coordinates.length;var maxLengthOfLineSegments=0;var polylineNotationInfo={coordinate:[],boundingRectangle:undefined,text:text,xAngle:0,weight:0};for(var i=0;i<numerOfPoints-1;i++){var currPoint=coordinates[i];var nextPoint=coordinates[i+1];var currPointCanvasCoordinate=wgs84CoordinateToCanvasCoordinate({coordinate:currPoint,rectangle:rectangle,canvasWidth:canvasWidth,canvasHeight:canvasHeight});var nextPointCanvasCoordinate=wgs84CoordinateToCanvasCoordinate({coordinate:nextPoint,rectangle:rectangle,canvasWidth:canvasWidth,canvasHeight:canvasHeight});var lengthOfLineSegment=distance(currPointCanvasCoordinate,nextPointCanvasCoordinate);if(lengthOfLineSegment>maxLengthOfLineSegments){polylineNotationInfo.coordinate=[(nextPointCanvasCoordinate[0]+currPointCanvasCoordinate[0])/2,(nextPointCanvasCoordinate[1]+currPointCanvasCoordinate[1])/2];polylineNotationInfo.weight=lengthOfLineSegment;var left=void 0;var right=void 0;if(currPointCanvasCoordinate[0]<nextPointCanvasCoordinate[0]){left=currPointCanvasCoordinate;right=nextPointCanvasCoordinate}else{left=nextPointCanvasCoordinate;right=currPointCanvasCoordinate}var leftToRight=[right[0]-left[0],right[1]-left[1]];polylineNotationInfo.xAngle=Math.atan2(leftToRight[1],leftToRight[0]);maxLengthOfLineSegments=lengthOfLineSegment}}return polylineNotationInfo}function buildPolygonNotationInfo(text,coordinates,rectangle,canvasWidth,canvasHeight){var polygonArea=Math.abs(computeSignedArea(coordinates));var polygonCenterOfMass=centerOfMassOfPolygon(coordinates);var labelCanvasCoordinate=wgs84CoordinateToCanvasCoordinate({coordinate:[polygonCenterOfMass.x,polygonCenterOfMass.y],rectangle:rectangle,canvasWidth:canvasWidth,canvasHeight:canvasHeight});var polygonBoundingRectangle=getPolygonBoundingRectangle({coordinates:coordinates,rectangle:rectangle,canvasWidth:canvasWidth,canvasHeight:canvasHeight});var notation={coordinate:labelCanvasCoordinate,boundingRectangle:polygonBoundingRectangle,text:text,weight:polygonArea};return notation}function projectToUV(coordinate,rectangle){var west=toDegrees(rectangle.west);var east=toDegrees(rectangle.east);var south=toDegrees(rectangle.south);var north=toDegrees(rectangle.north);var longitude=coordinate[0];var latitude=coordinate[1];var width=east-west;var height=north-south;var x=longitude-west;var y=latitude-south;return[x/width,y/height]}function wgs84CoordinateToCanvasCoordinate(options){var uv=projectToUV(options.coordinate,options.rectangle);var canvasCoordinate=[Math.floor(uv[0]*options.canvasWidth),Math.floor((1-uv[1])*options.canvasHeight)];return canvasCoordinate}function getPolygonBoundingRectangle(options){var coordinates=options.coordinates,rectangle=options.rectangle,canvasWidth=options.canvasWidth,canvasHeight=options.canvasHeight;var polygonBoundingRectangle={x:Number.POSITIVE_INFINITY,y:Number.POSITIVE_INFINITY,width:0,height:0};var _iterator=_createForOfIteratorHelper(coordinates),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var coordinate=_step.value;var canvasCoordinate=wgs84CoordinateToCanvasCoordinate({coordinate:coordinate,rectangle:rectangle,canvasWidth:canvasWidth,canvasHeight:canvasHeight});polygonBoundingRectangle.x=Math.min(polygonBoundingRectangle.x,canvasCoordinate[0]);polygonBoundingRectangle.y=Math.min(polygonBoundingRectangle.y,canvasCoordinate[1]);polygonBoundingRectangle.width=Math.max(polygonBoundingRectangle.width,canvasCoordinate[0]-polygonBoundingRectangle.x);polygonBoundingRectangle.height=Math.max(polygonBoundingRectangle.height,canvasCoordinate[1]-polygonBoundingRectangle.y)}}catch(err){_iterator.e(err)}finally{_iterator.f()}return polygonBoundingRectangle}function renderGeojsonToCanvas(parameters){var offscreenCanvas=parameters.offscreenCanvas,geojson=parameters.geojson,rectangle=parameters.rectangle,canvasStyle=parameters.canvasStyle;var outline=canvasStyle.outline,sizeInPixel=canvasStyle.sizeInPixel,lineWidth=canvasStyle.lineWidth,realPixelByMeters=canvasStyle.realPixelByMeters,lineDash=canvasStyle.lineDash,fill=canvasStyle.fill,filter=canvasStyle.filter,outlineColor=canvasStyle.outlineColor,fillColor=canvasStyle.fillColor,showCenterLabel=canvasStyle.showCenterLabel,labelType=canvasStyle.labelType,labelPropertyName=canvasStyle.labelPropertyName;var canvasWidth=offscreenCanvas.width;var canvasHeight=offscreenCanvas.height;var context=offscreenCanvas.getContext("2d");var features=geojson.features;if(geojson.type!=="FeatureCollection"||!features){return{imageBitmap:undefined,error:"geojson.type !== FeatureCollection, current is "+geojson.type}}if(lineDash&&lineDash.length>0){context.setLineDash(lineDash)}context.lineWidth=sizeInPixel?lineWidth:realPixelByMeters;var strokeStyle="rgba(255, 0, 0, 1)";if(typeof outlineColor==="string"){strokeStyle=outlineColor}else{var _iterator2=_createForOfIteratorHelper(outlineColor),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var c=_step2.value;if(c[0]===filter){strokeStyle=c[1];break}}}catch(err){_iterator2.e(err)}finally{_iterator2.f()}}context.strokeStyle=strokeStyle;var fillStyle="rgba(0, 128, 250, 0.3)";if(typeof fillColor==="string"){fillStyle=fillColor}else{var _iterator3=_createForOfIteratorHelper(fillColor),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var _c=_step3.value;if(_c[0]===filter){fillStyle=_c[1];break}}}catch(err){_iterator3.e(err)}finally{_iterator3.f()}}context.fillStyle=fillStyle;var geometryType;var neededDrawTextList=[];var _iterator4=_createForOfIteratorHelper(features),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var feature=_step4.value;if(feature.type==="Feature"){var geometry=feature.geometry;geometryType=geometry.type;var featureProperty=feature.properties[labelPropertyName];switch(geometryType){case"Polygon":{drawPolygonToCanvas(context,geometry.coordinates,rectangle,fill,outline);var exteriorRing=geometry.coordinates[0];var polygonNotationInfo=buildPolygonNotationInfo(featureProperty,exteriorRing,rectangle,canvasWidth,canvasHeight);neededDrawTextList.push(polygonNotationInfo);break}case"MultiPolygon":{var coordinates=geometry.coordinates;var length=coordinates.length;for(var i=0;i<length;i++){var coordinate=coordinates[i];drawPolygonToCanvas(context,coordinate,rectangle,fill,outline);if(i===0){var _polygonNotationInfo=buildPolygonNotationInfo(featureProperty,coordinate[0],rectangle,canvasWidth,canvasHeight);neededDrawTextList.push(_polygonNotationInfo)}}break}case"LineString":{if(outline||showCenterLabel&&labelType===LabelType.Label2D){drawPolyline(context,geometry.coordinates,rectangle,false,true);var polylineNotationInfo=buildPolylineNotationInfo(featureProperty,geometry.coordinates,rectangle,canvasWidth,canvasHeight);neededDrawTextList.push(polylineNotationInfo)}break}case"MultiLineString":{if(outline||showCenterLabel&&labelType===LabelType.Label2D){var polylineNotationInfoCandidates=[];var _iterator5=_createForOfIteratorHelper(geometry.coordinates),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var _coordinate=_step5.value;drawPolyline(context,_coordinate,rectangle,false,outline);var _polylineNotationInfo=buildPolylineNotationInfo(featureProperty,_coordinate,rectangle,canvasWidth,canvasHeight);polylineNotationInfoCandidates.push(_polylineNotationInfo)}}catch(err){_iterator5.e(err)}finally{_iterator5.f()}if(polylineNotationInfoCandidates.length>0){polylineNotationInfoCandidates.sort(function(a,b){return b.weight-a.weight});neededDrawTextList.push(polylineNotationInfoCandidates[0])}}break}default:console.log("unknown geometry.type",geometry);break;}}else{console.error("feature.type !== Feature",feature)}}}catch(err){_iterator4.e(err)}finally{_iterator4.f()}if(neededDrawTextList.length>0&&showCenterLabel&&labelType===LabelType.Label2D){neededDrawTextList.sort(function(a,b){return b.weight-a.weight});if(geometryType==="LineString"||geometryType==="MultiLineString"){drawPolylineFeaturesTextToCanvas(context,neededDrawTextList,canvasStyle)}else{drawPolygonFeaturesTextToCanvas(context,neededDrawTextList,canvasStyle)}}if(parameters.debugShowTileCoordinates){var cssColor="#ff00ff";context.strokeStyle=cssColor;context.lineWidth=2;context.strokeRect(1,1,255,255);context.font="bold 25px Arial";context.textAlign="center";context.fillStyle=cssColor;context.fillText("L: "+parameters.level,124,86);context.fillText("X: "+parameters.x,124,136);context.fillText("Y: "+parameters.y,124,186)}var imageBitmap=offscreenCanvas.transferToImageBitmap();return{imageBitmap:imageBitmap}}function drawPolyline(context,coordinates,rectangle,fill,stroke){var canvasWidth=context.canvas.width;var canvasHeight=context.canvas.height;if(coordinates.length<1){return}var numberOfPoints=coordinates.length;context.beginPath();for(var i=0;i<numberOfPoints;i++){var pointCoordinate=coordinates[i];var canvasCoordinate=wgs84CoordinateToCanvasCoordinate({coordinate:pointCoordinate,rectangle:rectangle,canvasWidth:canvasWidth,canvasHeight:canvasHeight});if(i===0){context.moveTo(canvasCoordinate[0],canvasCoordinate[1])}else{context.lineTo(canvasCoordinate[0],canvasCoordinate[1])}}if(fill){context.closePath();context.fill()}if(stroke){context.stroke()}return}function existOverlap(existLabels,detectPoint){var x=detectPoint.x,y=detectPoint.y,radius=detectPoint.radius;var hasOverlap=false;var d;for(var i=0,len=existLabels.length;i<len;i++){d=Math.pow(existLabels[i].x-x,2)+Math.pow(existLabels[i].y-y,2);if(d<Math.pow(existLabels[i].weight+radius,2)){hasOverlap=true;break}}return hasOverlap}function drawPolylineFeaturesTextToCanvas(context,polylineNotationInfoList,canvasStyle){var size=canvasStyle.size,markerStyle=canvasStyle.markerStyle;var showLabel=markerStyle.showLabel,labelOffset=markerStyle.labelOffset,fontSize=markerStyle.fontSize,fontColor=markerStyle.fontColor,fontFamily=markerStyle.fontFamily,fontStyle=markerStyle.fontStyle;if(!showLabel){return}context.save();var font="".concat(fontStyle," ").concat(fontSize,"px ").concat(fontFamily);context.font=font;context.textAlign="center";context.fillStyle=fontColor;var _iterator6=_createForOfIteratorHelper(polylineNotationInfoList),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var polylineNotationInfo=_step6.value;var coordinate=polylineNotationInfo.coordinate,xAngle=polylineNotationInfo.xAngle,text=polylineNotationInfo.text,weight=polylineNotationInfo.weight;coordinate[0]+=labelOffset.x;coordinate[1]+=labelOffset.y;var halfTextHeight=fontSize/3;var halfTextWidth=context.measureText(text).width/2;var matrix2=matrix2Scale(matrix2FromRotation(xAngle),halfTextWidth,halfTextHeight);var leftBottom=addVector2Vector2(multiMatrixVector2(matrix2,[-1,-1]),coordinate);var rightBottom=addVector2Vector2(multiMatrixVector2(matrix2,[1,-1]),coordinate);var leftTop=addVector2Vector2(multiMatrixVector2(matrix2,[-1,1]),coordinate);var rightTop=addVector2Vector2(multiMatrixVector2(matrix2,[1,1]),coordinate);var boundingRectangle=boundingRectangleFromPoints([leftBottom,rightBottom,leftTop,rightTop]);var x=boundingRectangle.x,y=boundingRectangle.y,width=boundingRectangle.width,height=boundingRectangle.height;if(x>=0&&y>=0&&x+width<=size.x&&y+height<=size.y&&weight>halfTextWidth*2){context.setTransform(1,0,0,1,0,0);context.translate(coordinate[0],coordinate[1]);context.rotate(xAngle);context.fillText(text,0,fontSize/3)}}}catch(err){_iterator6.e(err)}finally{_iterator6.f()}context.restore()}function drawPolygonFeaturesTextToCanvas(context,textList,canvasStyle){var size=canvasStyle.size,offset=canvasStyle.offset,markerStyle=canvasStyle.markerStyle;var showLabel=markerStyle.showLabel,labelOffset=markerStyle.labelOffset,fontSize=markerStyle.fontSize,fontColor=markerStyle.fontColor,fontFamily=markerStyle.fontFamily,fontStyle=markerStyle.fontStyle;if(!showLabel){return}context.save();var font="".concat(fontStyle," ").concat(fontSize,"px ").concat(fontFamily);context.font=font;context.textAlign="center";context.textBaseline="middle";context.fillStyle=fontColor;var existLabels=[];var _iterator7=_createForOfIteratorHelper(textList),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var textObject=_step7.value;var text=textObject.text,coordinate=textObject.coordinate;var pointX=coordinate[0]+offset.x;var pointY=coordinate[1]+offset.y;pointX+=labelOffset.x;pointY+=labelOffset.y;var halfTextHeight=fontSize;var halfTextWidth=context.measureText(text).width/2;var radius=Math.sqrt(halfTextHeight*halfTextHeight+halfTextWidth*halfTextWidth);if(existOverlap(existLabels,{x:pointX,y:pointY,radius:radius})){break}if(pointX>=halfTextWidth&&pointY>=halfTextHeight&&pointX<=size.x-halfTextWidth&&pointY<=size.y-halfTextHeight){context.fillText(text,pointX,pointY);existLabels.push({x:pointX,y:pointY,weight:radius})}}}catch(err){_iterator7.e(err)}finally{_iterator7.f()}context.restore()}function drawPolygonToCanvas(context,coordinates,rectangle,fill,stroke){var canvasWidth=context.canvas.width;var canvasHeight=context.canvas.height;if(coordinates.length<1){return}var exteriorRing=coordinates[0];var numberOfPoints=exteriorRing.length;context.beginPath();for(var i=0;i<numberOfPoints;i++){var pointCoordinate=exteriorRing[i];var canvasCoordinate=wgs84CoordinateToCanvasCoordinate({coordinate:pointCoordinate,rectangle:rectangle,canvasWidth:canvasWidth,canvasHeight:canvasHeight});if(i===0){context.moveTo(canvasCoordinate[0],canvasCoordinate[1])}else{context.lineTo(canvasCoordinate[0],canvasCoordinate[1])}}context.closePath();if(fill){context.fill()}if(stroke){context.stroke()}for(var ringIndex=1;ringIndex<coordinates.length;ringIndex++){var interiorRing=coordinates[ringIndex];var numberOfHolePoints=interiorRing.length;var minX=Number.POSITIVE_INFINITY;var maxX=Number.NEGATIVE_INFINITY;var minY=Number.POSITIVE_INFINITY;var maxY=Number.NEGATIVE_INFINITY;context.save();context.beginPath();for(var _i=0;_i<numberOfHolePoints;_i++){var _pointCoordinate=interiorRing[_i];var _canvasCoordinate=wgs84CoordinateToCanvasCoordinate({coordinate:_pointCoordinate,rectangle:rectangle,canvasWidth:canvasWidth,canvasHeight:canvasHeight});minX=Math.max(minX,Math.max(0,_canvasCoordinate[0]));maxX=Math.min(maxX,Math.min(canvasWidth,_canvasCoordinate[0]));minY=Math.max(minY,Math.max(0,_canvasCoordinate[1]));maxY=Math.min(maxY,Math.min(canvasHeight,_canvasCoordinate[1]));if(_i===0){context.moveTo(_canvasCoordinate[0],_canvasCoordinate[1])}else{context.lineTo(_canvasCoordinate[0],_canvasCoordinate[1])}}if(fill){context.closePath();context.clip();context.clearRect(minX,minY,maxX-minX,maxY-minY)}if(stroke){context.stroke()}context.restore()}}self.onmessage=createTaskProcessor(renderGeojsonToCanvas);