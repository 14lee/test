function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!=="undefined"&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();normalCompletion=step.done;return step},e:function e(_e2){didErr=true;err=_e2},f:function f(){try{if(!normalCompletion&&it["return"]!=null)it["return"]()}finally{if(didErr)throw err}}}}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}import{createTaskProcessor}from"./createTaskProcessor.js";import{addVector2Vector2,boundingRectangleFromPoints,centerOfMassOfPolygon,computeSignedArea,distance,matrix2FromRotation,matrix2Scale,multiMatrixVector2}from"./math.js";import"./pbf.js";import"./vector_tile.browser.js";var TWO_PI=Math.PI*2;function decodeZigzag(i){return i>>1^-(i&1)}var PBFGeomType;(function(PBFGeomType){PBFGeomType[PBFGeomType["UNKNOWN"]=0]="UNKNOWN";PBFGeomType[PBFGeomType["POINT"]=1]="POINT";PBFGeomType[PBFGeomType["LINESTRING"]=2]="LINESTRING";PBFGeomType[PBFGeomType["POLYGON"]=3]="POLYGON"})(PBFGeomType||(PBFGeomType={}));var PBFCommandType;(function(PBFCommandType){PBFCommandType[PBFCommandType["MoveTo"]=1]="MoveTo";PBFCommandType[PBFCommandType["LineTo"]=2]="LineTo";PBFCommandType[PBFCommandType["ClosePath"]=7]="ClosePath"})(PBFCommandType||(PBFCommandType={}));function decodeCommand(command){return{commandType:command&7,commandLength:command>>3}}function decodePoint(geometry,extent,ctx,canvasStyle){var length=geometry.length;var position=[0,0];var radius=3;ctx.beginPath();for(var i=0;i<length;i++){var _decodeCommand=decodeCommand(geometry[i]),commandType=_decodeCommand.commandType,commandLength=_decodeCommand.commandLength;if(commandType!==PBFCommandType.MoveTo){console.warn("point geometry has non-\"MoveTo\" command.",commandType,geometry);return}for(var j=0;j<commandLength;j++){var param0=geometry[i+(2*j+1)];var param1=geometry[i+(2*j+2)];var decoded0=decodeZigzag(param0);var decoded1=decodeZigzag(param1);position[0]+=decoded0;position[1]+=decoded1;var dx=position[0]/extent;var dy=position[1]/extent;var canvasX=dx*ctx.canvas.width;var canvasY=dy*ctx.canvas.height;ctx.moveTo(canvasX+radius,canvasY);ctx.arc(canvasX,canvasY,radius,0,TWO_PI,true)}i+=commandLength*2}if(canvasStyle.fill){ctx.fill()}if(canvasStyle.outline){ctx.stroke()}}function decodeLineString(geometry,extent,ctx,canvasStyle){var length=geometry.length;var position=[0,0];var lineList=[];for(var i=0;i<length;i++){var _decodeCommand2=decodeCommand(geometry[i]),commandType=_decodeCommand2.commandType,commandLength=_decodeCommand2.commandLength;for(var j=0;j<commandLength;j++){var param0=geometry[i+(2*j+1)];var param1=geometry[i+(2*j+2)];var decoded0=decodeZigzag(param0);var decoded1=decodeZigzag(param1);position[0]+=decoded0;position[1]+=decoded1;var dx=position[0]/extent;var dy=position[1]/extent;var canvasX=dx*ctx.canvas.width;var canvasY=dy*ctx.canvas.height;switch(commandType){case PBFCommandType.MoveTo:{lineList.push([[canvasX,canvasY]]);ctx.moveTo(canvasX,canvasY);break}case PBFCommandType.LineTo:{lineList[lineList.length-1].push([canvasX,canvasY]);ctx.lineTo(canvasX,canvasY);break}}}if(commandType===PBFCommandType.MoveTo||commandType===PBFCommandType.LineTo){i+=commandLength*2}}if(canvasStyle.outlineColor){ctx.stroke()}return computePolylineLabel(lineList)}function decodePolygon(geometry,extent,ctx,canvasStyle){var length=geometry.length;var position=[0,0];var positionList=[];var textList=[];for(var i=0;i<length;i++){var _decodeCommand3=decodeCommand(geometry[i]),commandType=_decodeCommand3.commandType,commandLength=_decodeCommand3.commandLength;for(var j=0;j<commandLength;j++){var param0=geometry[i+(2*j+1)];var param1=geometry[i+(2*j+2)];var decoded0=decodeZigzag(param0);var decoded1=decodeZigzag(param1);position[0]+=decoded0;position[1]+=decoded1;var dx=position[0]/extent;var dy=position[1]/extent;var canvasX=dx*ctx.canvas.width;var canvasY=dy*ctx.canvas.height;switch(commandType){case PBFCommandType.MoveTo:{positionList.push([canvasX,canvasY]);ctx.beginPath();ctx.moveTo(canvasX,canvasY);break}case PBFCommandType.LineTo:{positionList.push([canvasX,canvasY]);ctx.lineTo(canvasX,canvasY);break}case PBFCommandType.ClosePath:{position[0]-=decoded0;position[1]-=decoded1;var area=computeSignedArea(positionList);var centerOfMass=centerOfMassOfPolygon(positionList);textList.push({weight:area,coordinate:[centerOfMass.x,centerOfMass.y],text:""});positionList.length=0;ctx.closePath();if(canvasStyle.fill){ctx.fill()}if(canvasStyle.outline){ctx.stroke()}break}default:{console.warn("PBF: unknown command type: "+commandType)}}}if(commandType===PBFCommandType.MoveTo||commandType===PBFCommandType.LineTo){i+=commandLength*2}}textList.sort(function(a,b){return b.weight-a.weight});return textList[0]}function decodeFeature(feature,extent,keys,values,ctx,canvasStyle){var geometry=feature.geometry;var featureType=feature.type;var tags=feature.tags;var tagLength=tags.length/2;var properties={};for(var i=0;i<tagLength;i++){var keyIndex=tags[2*i];var valueIndex=tags[2*i+1];var key=keys[keyIndex];var value=values[valueIndex];properties[key]=value}var propertyValue=properties[canvasStyle.labelPropertyName]?properties[canvasStyle.labelPropertyName].string_value:"";var label;switch(featureType){case PBFGeomType.UNKNOWN:{break}case PBFGeomType.POINT:{decodePoint(geometry,extent,ctx,canvasStyle);break}case PBFGeomType.LINESTRING:{label=decodeLineString(geometry,extent,ctx,canvasStyle);break}case PBFGeomType.POLYGON:{label=decodePolygon(geometry,extent,ctx,canvasStyle);break}}if(canvasStyle.showCenterLabel&&!defined(properties[canvasStyle.labelPropertyName])){console.warn("PBF: No property named \"".concat(canvasStyle.labelPropertyName,"\", all keys is ").concat(keys.join(", "),"."))}if(label){label.text=propertyValue}return label}function pbfToCanvas(parameters){var offscreenCanvas=parameters.offscreenCanvas,pbf=parameters.pbf,canvasStyle=parameters.canvasStyle;var _self=self,Tile=_self.Tile,Pbf=_self.Pbf;var parsedTile=Tile.read(new Pbf(pbf));var ctx=offscreenCanvas.getContext("2d");ctx.fillStyle=canvasStyle.fillColor[0][1];ctx.strokeStyle=canvasStyle.outlineColor[0][1];ctx.lineWidth=canvasStyle.lineWidth;var layers=parsedTile.layers;var _iterator=_createForOfIteratorHelper(layers),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var layer=_step.value;var features=layer.features;var extent=layer.extent;var keys=layer.keys;var values=layer.values;var labelList=[];var featureLength=features.length;for(var j=0;j<featureLength;j++){var feature=features[j];var label=decodeFeature(feature,extent,keys,values,ctx,canvasStyle);if(label){labelList.push(label)}}if(canvasStyle.labelType===LabelType.Label2D&&canvasStyle.showCenterLabel&&featureLength>0){var firstFeatureType=features[0].type;if(firstFeatureType===PBFGeomType.LINESTRING){drawPolylineFeaturesTextToCanvas(ctx,labelList,canvasStyle)}else if(firstFeatureType===PBFGeomType.POLYGON){drawPolygonFeaturesTextToCanvas(ctx,labelList,canvasStyle)}}}}catch(err){_iterator.e(err)}finally{_iterator.f()}if(parameters.debugShowTileCoordinates){var cssColor="#ff00ff";ctx.strokeStyle=cssColor;ctx.lineWidth=2;ctx.strokeRect(1,1,255,255);ctx.font="bold 25px Arial";ctx.textAlign="center";ctx.fillStyle=cssColor;ctx.fillText("L: "+parameters.level,124,86);ctx.fillText("X: "+parameters.x,124,136);ctx.fillText("Y: "+parameters.y,124,186)}var imageBitmap=offscreenCanvas.transferToImageBitmap();return{imageBitmap:imageBitmap}}var LabelType;(function(LabelType){LabelType["Label2D"]="Label2D";LabelType["Label3D"]="Label3D"})(LabelType||(LabelType={}));function defined(v){return v!==undefined&&v!==null}function existOverlap(existLabels,detectPoint){var x=detectPoint.x,y=detectPoint.y,radius=detectPoint.radius;var hasOverlap=false;var d;for(var i=0,len=existLabels.length;i<len;i++){d=Math.pow(existLabels[i].x-x,2)+Math.pow(existLabels[i].y-y,2);if(d<Math.pow(existLabels[i].weight+radius,2)){hasOverlap=true;break}}return hasOverlap}function drawPolylineFeaturesTextToCanvas(context,polylineNotationInfoList,canvasStyle){var size=canvasStyle.size,markerStyle=canvasStyle.markerStyle;var showLabel=markerStyle.showLabel,labelOffset=markerStyle.labelOffset,fontSize=markerStyle.fontSize,fontColor=markerStyle.fontColor,fontFamily=markerStyle.fontFamily,fontStyle=markerStyle.fontStyle;if(!showLabel){return}context.save();var font="".concat(fontStyle," ").concat(fontSize,"px ").concat(fontFamily);context.font=font;context.textAlign="center";context.fillStyle=fontColor;var _iterator2=_createForOfIteratorHelper(polylineNotationInfoList),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var polylineNotationInfo=_step2.value;var coordinate=polylineNotationInfo.coordinate,xAngle=polylineNotationInfo.xAngle,text=polylineNotationInfo.text,weight=polylineNotationInfo.weight;coordinate[0]+=labelOffset.x;coordinate[1]+=labelOffset.y;var halfTextHeight=fontSize/3;var halfTextWidth=context.measureText(text).width/2;var matrix2=matrix2Scale(matrix2FromRotation(xAngle),halfTextWidth,halfTextHeight);var leftBottom=addVector2Vector2(multiMatrixVector2(matrix2,[-1,-1]),coordinate);var rightBottom=addVector2Vector2(multiMatrixVector2(matrix2,[1,-1]),coordinate);var leftTop=addVector2Vector2(multiMatrixVector2(matrix2,[-1,1]),coordinate);var rightTop=addVector2Vector2(multiMatrixVector2(matrix2,[1,1]),coordinate);var boundingRectangle=boundingRectangleFromPoints([leftBottom,rightBottom,leftTop,rightTop]);var x=boundingRectangle.x,y=boundingRectangle.y,width=boundingRectangle.width,height=boundingRectangle.height;if(x>=0&&y>=0&&x+width<=size.x&&y+height<=size.y&&weight>halfTextWidth*2){context.setTransform(1,0,0,1,0,0);context.translate(coordinate[0],coordinate[1]);context.rotate(xAngle);context.fillText(text,0,fontSize/3)}}}catch(err){_iterator2.e(err)}finally{_iterator2.f()}context.restore()}function drawPolygonFeaturesTextToCanvas(context,textList,canvasStyle){var size=canvasStyle.size,offset=canvasStyle.offset,markerStyle=canvasStyle.markerStyle;var showLabel=markerStyle.showLabel,labelOffset=markerStyle.labelOffset,fontSize=markerStyle.fontSize,fontColor=markerStyle.fontColor,fontFamily=markerStyle.fontFamily,fontStyle=markerStyle.fontStyle;if(!showLabel){return}context.save();var font="".concat(fontStyle," ").concat(fontSize,"px ").concat(fontFamily);context.font=font;context.textAlign="center";context.textBaseline="middle";context.fillStyle=fontColor;var existLabels=[];var _iterator3=_createForOfIteratorHelper(textList),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var textObject=_step3.value;var text=textObject.text,coordinate=textObject.coordinate;var pointX=coordinate[0]+offset.x;var pointY=coordinate[1]+offset.y;pointX+=labelOffset.x;pointY+=labelOffset.y;var halfTextHeight=fontSize;var halfTextWidth=context.measureText(text).width/2;var radius=Math.sqrt(halfTextHeight*halfTextHeight+halfTextWidth*halfTextWidth);if(existOverlap(existLabels,{x:pointX,y:pointY,radius:radius})){break}if(pointX>=halfTextWidth&&pointY>=halfTextHeight&&pointX<=size.x-halfTextWidth&&pointY<=size.y-halfTextHeight){context.fillText(text,pointX,pointY);existLabels.push({x:pointX,y:pointY,weight:radius})}}}catch(err){_iterator3.e(err)}finally{_iterator3.f()}context.restore()}function computePolylineLabel(lineList){var maxLengthOfLineSegments=0;var polylineNotationInfoList=[];var _iterator4=_createForOfIteratorHelper(lineList),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var line=_step4.value;var pointCount=line.length;var polylineNotationInfo={coordinate:[],text:"",xAngle:0,weight:0};if(pointCount>0){polylineNotationInfoList.push(polylineNotationInfo)}for(var i=0;i<pointCount-1;i++){var currPoint=line[i];var nextPoint=line[i+1];var lengthOfLineSegment=distance(currPoint,nextPoint);if(lengthOfLineSegment>maxLengthOfLineSegments){polylineNotationInfo.coordinate=[(currPoint[0]+nextPoint[0])/2,(currPoint[1]+nextPoint[1])/2];polylineNotationInfo.weight=lengthOfLineSegment;var left=void 0;var right=void 0;if(currPoint[0]<nextPoint[0]){left=currPoint;right=nextPoint}else{left=nextPoint;right=currPoint}var leftToRight=[right[0]-left[0],right[1]-left[1]];polylineNotationInfo.xAngle=Math.atan2(leftToRight[1],leftToRight[0]);maxLengthOfLineSegments=lengthOfLineSegment}}}}catch(err){_iterator4.e(err)}finally{_iterator4.f()}polylineNotationInfoList.sort(function(a,b){return a.weight-b.weight});return polylineNotationInfoList[0]}self.onmessage=createTaskProcessor(pbfToCanvas);