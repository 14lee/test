import"./element-plus.59ccb443.js";import{r}from"./login.a4e9287e.js";const g={getServicePageList({category:e,status:s,keyword:o="",rows:a,page:t,model:i="",label:m="",catalogId:n=""}){return r.doGetPromise("/mapserver/manager/services",{category:e,status:s,keyword:o,rows:a,page:t,model:i,label:m,catalogId:n})},changeServiceStatus(e,s){return r.doPostPromise(`/mapserver/manager/services/${e}/status`,{status:s},{})},registerServiceInfo(e){return r.doPostPromiseJson("/mapserver/manager/services/register",e,{})},updateServiceInfo(e){return r.doPostPromiseJson("/mapserver/manager/services/update",e,{})},checkServiceName(e,s,o){return r.doGetPromise("/mapserver/manager/services/checkServiceName",{name:e,category:s,currResourceSetId:o})},getServiceInfoById(e){return r.doGetPromise(`/mapserver/manager/services/${e}`)},getSlicingLogById(e){return r.doGetPromise(`/mapserver/manager/services/info/${e}`)},deleteServiceByIds(e){return r.doPostPromise("/mapserver/manager/services/delete",{ids:e},{})},cancelServiceByIds(e,s){return r.doPostPromise("/mapserver/manager/services/process/cancel",{serviceIds:e,cancelMode:s},{})},republishService(e){return r.doPostPromiseJson("/mapserver/manager/services/process/republish",e,{})},getWorkerInfoByServiceId(e){return r.doGetPromise("/mapserver/manager/services/getWorkerInfoByServiceId",{serviceId:e})},generateServiceThumbnail({serviceId:e,base64:s,visualAngle:o}){return r.doPostPromiseJson("/mapserver/manager/services/generateThumbnail",{serviceId:e,base64:s,visualAngle:o},{})},getProcessPageList({resourceDataType:e="",publishStatus:s="PUBLISHED",serviceType:o="",keyword:a="",rows:t,page:i}){return r.doPostPromiseJson("/mapserver/manager/services/process/list",{resourceDataType:e,serviceType:o,publishStatus:Array.isArray(s)?s:[s],keyword:a,rows:t,page:i},{})},getWorkerInfo(e){return r.doGetPromise("/mapserver/manager/services/process/getWorkerInfo",{id:e})},cancelPublishByIds(e,s){return r.doPostPromise("/mapserver/manager/services/process/cancel",{ids:e,cancelMode:s},{})},getTilesLog(e){return r.doGetPromise("/mapserver/manager/services/process/getTilesLog",{publishId:e})},getTilesLogByDataId(e){return r.doGetPromise("/mapserver/manager/services/process/getTilesLogByResultDataId",{resultDataId:e})},getVersionList(e){return r.doGetPromise("/mapserver/mapservicesVersion/lists",{serviceId:e})},switchVersion(e){return r.doPostPromise("/mapserver/mapservicesVersion/switchversion",{versionId:e})},deleteVersion(e){return r.doPostPromise(`/mapserver/mapservicesVersion/delete/${e}`,{mapservicesVersionId:e})},batchDeleteVersion(e){return r.doPostPromise("/mapserver/mapservicesVersion/batch/delete",{mapservicesVersionIds:e},{})},getReplaceSchema(e){return r.doGetPromise("/mapserver/manager/services/process/getReplaceSchema",{id:e})},getTileWorkerInfo(e){return r.doGetPromise(`/mapserver/manager/services/process/getTileWorkerInfo/${e}`)},getAllTags(){return r.doGetPromise("/mapserver/manager/services/selectAllLabelList")},batchRegisterExternalService(e){const s=new FormData;for(const o in e)s.append(o,e[o]);return r.doPostPromiseForm("/mapserver/manager/services/batchRegister",s,{})},checkBatchRegisterFile(e){const s=new FormData;return s.append("file",e),r.doPostPromiseForm("/mapserver/manager/services/checkBatchRegister",s,{})},serviceBound(e){return r.doGetPromise(`/mapserver/manager/services/${e}/serviceBound`)},checkMapServiceStatus(e){return r.doGetPromise("/mapserver/manager/services/checkMapServiceStatus",{serviceIds:e})}};export{g as S};
